#!/usr/bin/env ruby

require 'erb'
require 'fileutils'
require 'json'

# Transforms a coin name to a C++ name
def self.format_name(n)
  formatted = n
  formatted = formatted.sub(/^([a-z]+)/, &:upcase)
  formatted = formatted.gsub(/-/, ' ')
  formatted = formatted.gsub(/\./, ' ')
  formatted = formatted.gsub(/\s/, '')
  formatted
end

def self.coin_name(coin)
  coin['displayName'] || coin['name']
end

def self.derivation_path(coin)
  coin['derivation'][0]['path']
end

def self.camel_case(id)
  id[0].upcase + id[1..].downcase
end

def self.derivation_name(deriv)
  return "" if deriv['name'].nil?
  deriv['name'].downcase
end

def self.derivation_enum_name(deriv, coin)
  return "NWDerivationDefault" if deriv['name'].nil?
  "NWDerivation" + format_name(coin['name']) + camel_case(deriv['name'])
end

def self.coin_img(coin)
  "<img src=\"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/#{coin}/info/logo.png\" width=\"32\" />"
end

# Explorer urls
def self.explorer_tx_url(c)
  path = c['explorer']['url'].to_s + c['explorer']['txPath'].to_s
end
def self.explorer_account_url(c)
  path = c['explorer']['url'].to_s + c['explorer']['accountPath'].to_s
end

json_string = File.read('registry.json')
coins = JSON.parse(json_string).sort_by { |x| x['coinId'] }

# used in some cases for numbering enum values
enum_count = 0

erbs = [
  {'template' => 'NWDerivation.h.erb', 'folder' => 'include/NiceWCore', 'file' => 'NWDerivation.h'},
  {'template' => 'CoinInfoData.cpp.erb', 'folder' => 'src/Generated', 'file' => 'CoinInfoData.cpp'},
  {'template' => 'registry.md.erb', 'folder' => 'docs', 'file' => 'registry.md'},
  {'template' => 'hrp.cpp.erb', 'folder' => 'src/Generated', 'file' => 'NWHRP.cpp'},
  {'template' => 'hrp.h.erb', 'folder' => 'include/NiceWCore', 'file' => 'NWHRP.h'},
  {'template' => 'NWEthereumChainID.h.erb', 'folder' => 'include/NiceWCore', 'file' => 'NWEthereumChainID.h'}
]

FileUtils.mkdir_p File.join('src', 'Generated')
erbs.each do |erb|
  path = File.expand_path(erb['template'], File.join(File.dirname(__FILE__), '..', 'lib', 'templates'))
  template = ERB.new(File.read(path), nil, '-')
  result = template.result(binding)

  path = File.join(erb['folder'], erb['file'])
  File.write(path, result)
end
