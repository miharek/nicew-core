// Copyright Â© 2017-2022 Trust Wallet.
//
// This file is part of Trust. The full Trust copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.
//
// This is a GENERATED FILE, changes made here WILL BE LOST.
//

#include "Coin.h"
#include <NiceWCore/NWCoinTypeConfiguration.h>

#include <vector>
#include <cassert>

using namespace NW;

static const CoinInfo defaultsForMissing = {
    "?",
    "?",
    NWBlockchainBitcoin,
    NWPurposeBIP44,
    NWCurveNone,
    {Derivation()},
    NWPublicKeyTypeSECP256k1,
    0,
    0,
    0,
    NWHRPUnknown,
    "",
    Hash::HasherSha256ripemd,
    Hash::HasherSha256d,
    Hash::HasherSha256ripemd,
    "?",
    2,
    "",
    "",
    0,
};

/// Get coin from map, if missing returns defaults (not to have contains-check in each accessor method)
const CoinInfo getCoinInfo(NWCoinType coin) {
    // switch is preferred instead of a data structure, due to initialization issues
    switch (coin) {
<% coins.each do |coin| -%>
        case NWCoinType<%= format_name(coin['name']) %>:
            return CoinInfo {
                "<%= coin['id'] %>",
                "<%= coin_name(coin) %>",
                NWBlockchain<%= format_name(coin['blockchain']) %>,
                NWPurposeBIP<%= /^m\/(\d+)'?(\/\d+'?)+$/.match(derivation_path(coin))[1] %>,
                NWCurve<%= format_name(coin['curve']) %>,
                {
                    <% coin['derivation'].each do |deriv| -%>{
                        <%= derivation_enum_name(deriv, coin) %>,
                        "<%= deriv['path'] %>",
                        "<%= derivation_name(deriv) %>",
                        NWHDVersion<% if deriv['xpub'].nil? -%>None<% else -%><%= format_name(deriv['xpub']) %><% end -%>,
                        NWHDVersion<% if deriv['xprv'].nil? -%>None<% else -%><%= format_name(deriv['xprv']) %><% end -%>,
                    },
                <% end -%>},
                NWPublicKeyType<%= format_name(coin['publicKeyType']) %>,
                <% if coin['staticPrefix'].nil? -%>0<% else -%><%= coin['staticPrefix'] %><% end -%>,
                <% if coin['p2pkhPrefix'].nil? -%>0<% else -%><%= coin['p2pkhPrefix'] %><% end -%>,
                <% if coin['p2shPrefix'].nil? -%>0<% else -%><%= coin['p2shPrefix'] %><% end -%>,
                NWHRP<% if coin['hrp'].nil? -%>Unknown<% else -%><%= format_name(coin['name']) %><% end -%>,
                "<%= coin['chainId'] %>",
                Hash::Hasher<% if coin['publicKeyHasher'].nil? -%>Sha256ripemd<% else -%><%= camel_case(coin['publicKeyHasher']) %><% end -%>,
                Hash::Hasher<% if coin['base58Hasher'].nil? -%>Sha256d<% else -%><%= camel_case(coin['base58Hasher']) %><% end -%>,
                Hash::Hasher<% if coin['addressHasher'].nil? -%>Sha256ripemd<% else -%><%= camel_case(coin['addressHasher']) %><% end -%>,
                "<%= coin['symbol'] %>",
                <%= coin['decimals'] %>,
                "<%= explorer_tx_url(coin) %>",
                "<%= explorer_account_url(coin) %>",
                <% if coin['slip44'].nil? -%><%= coin['coinId'] %><% else -%><%= coin['slip44'] %><% end -%>,
            };
<% end -%>
        default:
            return defaultsForMissing;
    }
}

std::vector<NWCoinType> NW::getCoinTypes() {
    return std::vector<NWCoinType>({
    <% coins.each do |coin| -%>
        NWCoinType<%= format_name(coin['name']) %>,
    <% end -%>
    });
}
